{"version":3,"sources":["a.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","width","height","icon","color","TitlebarGridList","socket","classes","useState","selected","setSelected","tileData","setTileData","name","setName","on","data","className","GridList","cellHeight","map","tile","GridListTile","key","img","onClick","console","log","quantity","alert","title","src","alt","GridListTileBar","subtitle","TextField","value","onChange","e","target","Button","style","emit","App","state","endpoint","this","socketIOClient","setState","textAlign","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0TAOMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,QAAS,OACTC,SAAU,OACVC,eAAgB,eAChBC,SAAU,SACVC,gBAAiBN,EAAMO,QAAQC,WAAWC,OAE9CC,SAAU,CACNC,MAAO,IACPC,OAAQ,KAEZC,KAAM,CACFC,MAAO,iCAIA,SAASC,EAAT,GAAqC,IAAVC,EAAS,EAATA,OAChCC,EAAUnB,IAD+B,EAGfoB,mBAAS,MAHM,mBAGxCC,EAHwC,KAG9BC,EAH8B,OAIfF,mBAAS,IAJM,mBAIxCG,EAJwC,KAI9BC,EAJ8B,OAKvBJ,qBALuB,mBAKxCK,EALwC,KAKlCC,EALkC,KAa/C,OANAR,EAAOS,GAAG,kBAAkB,SAACC,GAAWJ,EAAYI,MAOhD,6BACI,yBAAKC,UAAWV,EAAQhB,MACpB,kBAAC2B,EAAA,EAAD,CAAUC,WAAY,IAAKF,UAAWV,EAAQP,UACzCW,EAASS,KAAI,SAAAC,GAAI,OACd,kBAACC,EAAA,EAAD,CAAcC,IAAKF,EAAKG,IAAKC,QAAS,WAClCC,QAAQC,IAAIrB,GACZe,EAAKO,SAAWlB,EAAYW,GAAQQ,MAAM,+BAAD,OAAiCR,EAAKS,MAAtC,kBAEzC,yBAAKC,IAAKV,EAAKG,IAAKQ,IAAKX,EAAKS,QAC9B,kBAACG,EAAA,EAAD,CACIH,MAAOT,EAAKS,MACZI,SAAU,4CAAkBb,EAAKO,kBAMrD,6BAAK,6BAjBT,oDAkBqD,kBAACO,EAAA,EAAD,CAAWC,MAAOvB,EAAMwB,SAAU,SAACC,GAAD,OAAOxB,EAAQwB,EAAEC,OAAOH,UAlB/G,IAkB0H,6BAAK,6BAAK,6BAC/H3B,GAAYI,GACb,kBAAC2B,EAAA,EAAD,CAAQC,MAAO,CAAC7C,gBAAiB,SACzB6B,QAAS,kBAAMnB,EAAOoC,KAAK,kBAAmBjC,KADtD,aAC4EA,EAASqB,MADrF,uB,IC3BGa,E,YAzBX,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTtC,OAAQ,KACRuC,SAAU,yBAJJ,E,iFAQO,IACVA,EAAYC,KAAKF,MAAjBC,SACDvC,EAASyC,IAAeF,GAC9BC,KAAKE,SAAS,CAAC1C,a,+BAGT,IACCA,EAAUwC,KAAKF,MAAftC,OAEP,OACI,yBAAKmC,MAAO,CAACQ,UAAW,WAClB3C,GAAW,kBAAC,EAAD,CAAGA,OAAQA,S,GApBtB4C,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,a","file":"static/js/main.afc4b516.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport {Button, TextField} from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-around',\n        overflow: 'hidden',\n        backgroundColor: theme.palette.background.paper,\n    },\n    gridList: {\n        width: 500,\n        height: 600,\n    },\n    icon: {\n        color: 'rgba(255, 255, 255, 0.54)',\n    },\n}));\n\nexport default function TitlebarGridList({socket}) {\n    const classes = useStyles();\n\n    const [selected, setSelected] = useState(null);\n    const [tileData, setTileData] = useState([]);\n    const [name, setName] = useState();\n\n    socket.on('updatedOptions', (data) => { setTileData(data) });\n\n    function abc() {\n        alert('done')\n    }\n\n    return (\n        <div>\n            <div className={classes.root}>\n                <GridList cellHeight={180} className={classes.gridList}>\n                    {tileData.map(tile => (\n                        <GridListTile key={tile.img} onClick={() => {\n                            console.log(socket)\n                            tile.quantity ? setSelected(tile) : alert(`unfortunately there are no '${ tile.title }' remaining`)\n                        }}>\n                            <img src={tile.img} alt={tile.title}/>\n                            <GridListTileBar\n                                title={tile.title}\n                                subtitle={<span>Remaining: {tile.quantity}</span>}\n                            />\n                        </GridListTile>\n                    ))}\n                </GridList>\n            </div>\n            <br/><br/>\n            Name (please full name so I don't get mixed up): <TextField value={name} onChange={(e) => setName(e.target.value)} /> <br/><br/><br/>\n            {selected && name && (\n            <Button style={{backgroundColor: \"green\" }}\n                    onClick={() => socket.emit('optionSelection', selected)}>selected: {selected.title} (click to submit)</Button>\n            )}\n        </div>\n    );\n}\n","import React, {Component} from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport A  from \"./a\";\nimport './index.css'\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            socket: null,\n            endpoint: \"http://127.0.0.1:4001\"\n        };\n    }\n\n    componentDidMount() {\n        const {endpoint} = this.state;\n        const socket = socketIOClient(endpoint);\n        this.setState({socket});\n    }\n\n    render() {\n        const {socket} = this.state;\n\n        return (\n            <div style={{textAlign: \"center\"}}>\n                { socket && (<A socket={socket} />) }\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}