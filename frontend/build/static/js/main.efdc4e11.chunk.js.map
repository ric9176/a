{"version":3,"sources":["a.js","App.js","index.js"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","width","height","icon","color","TitlebarGridList","socket","classes","useState","selected","setSelected","tileData","setTileData","name","setName","on","data","className","GridList","cellHeight","map","tile","GridListTile","key","img","onClick","console","log","quantity","alert","title","src","alt","GridListTileBar","subtitle","TextField","value","onChange","e","target","Button","style","emit","App","state","this","endpoint","host","window","location","hostname","socketIOClient","setState","textAlign","Component","ReactDOM","render","document","getElementById"],"mappings":"0TAOMA,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACnCC,KAAM,CACFC,QAAS,OACTC,SAAU,OACVC,eAAgB,eAChBC,SAAU,SACVC,gBAAiBN,EAAMO,QAAQC,WAAWC,OAE9CC,SAAU,CACNC,MAAO,IACPC,OAAQ,KAEZC,KAAM,CACFC,MAAO,iCAIA,SAASC,EAAT,GAAqC,IAAVC,EAAS,EAATA,OAChCC,EAAUnB,IAD+B,EAGfoB,mBAAS,MAHM,mBAGxCC,EAHwC,KAG9BC,EAH8B,OAIfF,mBAAS,IAJM,mBAIxCG,EAJwC,KAI9BC,EAJ8B,OAKvBJ,qBALuB,mBAKxCK,EALwC,KAKlCC,EALkC,KAa/C,OANAR,EAAOS,GAAG,kBAAkB,SAACC,GAAWJ,EAAYI,MAOhD,6BACI,yBAAKC,UAAWV,EAAQhB,MACpB,kBAAC2B,EAAA,EAAD,CAAUC,WAAY,IAAKF,UAAWV,EAAQP,UACzCW,EAASS,KAAI,SAAAC,GAAI,OACd,kBAACC,EAAA,EAAD,CAAcC,IAAKF,EAAKG,IAAKC,QAAS,WAClCC,QAAQC,IAAIrB,GACZe,EAAKO,SAAWlB,EAAYW,GAAQQ,MAAM,+BAAD,OAAiCR,EAAKS,MAAtC,kBAEzC,yBAAKC,IAAKV,EAAKG,IAAKQ,IAAKX,EAAKS,QAC9B,kBAACG,EAAA,EAAD,CACIH,MAAOT,EAAKS,MACZI,SAAU,4CAAkBb,EAAKO,kBAMrD,6BAAK,6BAjBT,oDAkBqD,kBAACO,EAAA,EAAD,CAAWC,MAAOvB,EAAMwB,SAAU,SAACC,GAAD,OAAOxB,EAAQwB,EAAEC,OAAOH,UAlB/G,IAkB0H,6BAAK,6BAAK,6BAC/H3B,GAAYI,GACb,kBAAC2B,EAAA,EAAD,CAAQC,MAAO,CAAC7C,gBAAiB,SACzB6B,QAAS,kBAAMnB,EAAOoC,KAAK,kBAAmBjC,KADtD,aAC4EA,EAASqB,MADrF,uB,IC1BGa,E,YA1BX,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTtC,OAAQ,MAHF,E,iFASSuC,KAAKD,MAAjBE,SADU,IAEXC,EAAoC,cAA7BC,OAAOC,SAASC,SAA2B,wBAA0BF,OAAOC,SAASC,SAC5F5C,EAAS6C,IAAeJ,GAC9BF,KAAKO,SAAS,CAAC9C,a,+BAGT,IACCA,EAAUuC,KAAKD,MAAftC,OAEP,OACI,yBAAKmC,MAAO,CAACY,UAAW,WAClB/C,GAAW,kBAAC,EAAD,CAAGA,OAAQA,S,GArBtBgD,aCAlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.efdc4e11.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport {Button, TextField} from '@material-ui/core';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-around',\n        overflow: 'hidden',\n        backgroundColor: theme.palette.background.paper,\n    },\n    gridList: {\n        width: 500,\n        height: 600,\n    },\n    icon: {\n        color: 'rgba(255, 255, 255, 0.54)',\n    },\n}));\n\nexport default function TitlebarGridList({socket}) {\n    const classes = useStyles();\n\n    const [selected, setSelected] = useState(null);\n    const [tileData, setTileData] = useState([]);\n    const [name, setName] = useState();\n\n    socket.on('updatedOptions', (data) => { setTileData(data) });\n\n    // function abc() {\n    //     alert('done')\n    // }\n\n    return (\n        <div>\n            <div className={classes.root}>\n                <GridList cellHeight={180} className={classes.gridList}>\n                    {tileData.map(tile => (\n                        <GridListTile key={tile.img} onClick={() => {\n                            console.log(socket)\n                            tile.quantity ? setSelected(tile) : alert(`unfortunately there are no '${ tile.title }' remaining`)\n                        }}>\n                            <img src={tile.img} alt={tile.title}/>\n                            <GridListTileBar\n                                title={tile.title}\n                                subtitle={<span>Remaining: {tile.quantity}</span>}\n                            />\n                        </GridListTile>\n                    ))}\n                </GridList>\n            </div>\n            <br/><br/>\n            Name (please full name so I don't get mixed up): <TextField value={name} onChange={(e) => setName(e.target.value)} /> <br/><br/><br/>\n            {selected && name && (\n            <Button style={{backgroundColor: \"green\" }}\n                    onClick={() => socket.emit('optionSelection', selected)}>selected: {selected.title} (click to submit)</Button>\n            )}\n        </div>\n    );\n}\n","import React, {Component} from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport A  from \"./a\";\nimport './index.css'\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            socket: null,\n            // endpoint: \"http://127.0.0.1:8080\"\n        };\n    }\n\n    componentDidMount() {\n        const {endpoint} = this.state;\n        const host = window.location.hostname === 'localhost' ? \"http://127.0.0.1:8080\" : window.location.hostname;\n        const socket = socketIOClient(host);\n        this.setState({socket});\n    }\n\n    render() {\n        const {socket} = this.state;\n\n        return (\n            <div style={{textAlign: \"center\"}}>\n                { socket && (<A socket={socket} />) }\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}